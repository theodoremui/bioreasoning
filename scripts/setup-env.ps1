# BioReasoning Environment Setup Script (PowerShell)
# This script helps users configure API keys for podcast generation

param(
    [switch]$Force,
    [switch]$CheckOnly,
    [switch]$Help
)

# Function to write colored output
function Write-Status {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

function Show-Help {
    Write-Host "Usage: .\setup-env.ps1 [options]"
    Write-Host ""
    Write-Host "Options:"
    Write-Host "  -Force      Force recreation of .env file"
    Write-Host "  -CheckOnly  Only check current environment, don't prompt for input"
    Write-Host "  -Help       Show this help message"
    Write-Host ""
    Write-Host "Examples:"
    Write-Host "  .\setup-env.ps1                    # Interactive setup"
    Write-Host "  .\setup-env.ps1 -CheckOnly         # Check current setup"
    Write-Host "  .\setup-env.ps1 -Force             # Force recreate .env"
}

# Function to validate API key format
function Test-ApiKey {
    param([string]$ApiKey, [string]$Provider)
    
    if ([string]::IsNullOrWhiteSpace($ApiKey)) {
        return $false
    }
    
    # Basic validation patterns
    switch ($Provider) {
        "OpenAI" {
            # OpenAI keys typically start with 'sk-' and are 51 characters long
            return $ApiKey -match '^sk-[a-zA-Z0-9]{48}$'
        }
        "ElevenLabs" {
            # ElevenLabs keys are typically 28 characters long
            return $ApiKey.Length -eq 28 -and $ApiKey -match '^[a-zA-Z0-9]+$'
        }
        default {
            return $ApiKey.Length -gt 10
        }
    }
}

# Function to safely read user input
function Read-SecureInput {
    param([string]$Prompt, [string]$Provider)
    
    Write-Host $Prompt -ForegroundColor Cyan
    Write-Host "   Get your API key from:" -ForegroundColor Gray
    
    switch ($Provider) {
        "OpenAI" {
            Write-Host "   https://platform.openai.com/api-keys" -ForegroundColor Gray
        }
        "ElevenLabs" {
            Write-Host "   https://elevenlabs.io/speech-synthesis" -ForegroundColor Gray
        }
    }
    
    $input = Read-Host "   Enter your $Provider API key (or press Enter to skip)"
    
    if ([string]::IsNullOrWhiteSpace($input)) {
        return $null
    }
    
    # Validate the API key
    if (Test-ApiKey -ApiKey $input -Provider $Provider) {
        return $input
    } else {
        Write-Warning "   The API key format doesn't look correct for $Provider"
        $confirm = Read-Host "   Continue anyway? (y/N)"
        if ($confirm -eq 'y' -or $confirm -eq 'Y') {
            return $input
        } else {
            return $null
        }
    }
}

# Function to load existing environment variables
function Load-EnvFile {
    param([string]$FilePath)
    
    $envVars = @{}
    
    if (Test-Path $FilePath) {
        try {
            $content = Get-Content $FilePath -ErrorAction Stop
            foreach ($line in $content) {
                $line = $line.Trim()
                
                # Skip comments and empty lines
                if ($line.StartsWith('#') -or [string]::IsNullOrWhiteSpace($line)) {
                    continue
                }
                
                # Parse variable assignment
                if ($line.Contains('=')) {
                    $parts = $line.Split('=', 2)
                    $varName = $parts[0].Trim()
                    $varValue = if ($parts.Length -gt 1) { $parts[1].Trim() } else { "" }
                    
                    # Remove quotes if present
                    if ($varValue.StartsWith('"') -and $varValue.EndsWith('"')) {
                        $varValue = $varValue.Substring(1, $varValue.Length - 2)
                    } elseif ($varValue.StartsWith("'") -and $varValue.EndsWith("'")) {
                        $varValue = $varValue.Substring(1, $varValue.Length - 2)
                    }
                    
                    $envVars[$varName] = $varValue
                }
            }
        }
        catch {
            Write-Error "Failed to read .env file: $_"
        }
    }
    
    return $envVars
}

# Function to save environment variables to .env file
function Save-EnvFile {
    param([hashtable]$EnvVars, [string]$FilePath)
    
    try {
        $content = @()
        
        # Add header comment
        $content += "# BioReasoning Environment Configuration"
        $content += "# Generated by setup-env.ps1"
        $content += "# $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        $content += ""
        
        # Add required variables
        $content += "# Required API Keys"
        if ($EnvVars.ContainsKey('OPENAI_API_KEY')) {
            $content += "OPENAI_API_KEY=$($EnvVars['OPENAI_API_KEY'])"
        }
        if ($EnvVars.ContainsKey('ELEVENLABS_API_KEY')) {
            $content += "ELEVENLABS_API_KEY=$($EnvVars['ELEVENLABS_API_KEY'])"
        }
        
        $content += ""
        $content += "# Database Configuration (matches Docker Compose defaults)"
        if ($EnvVars.ContainsKey('pgql_user')) {
            $content += "pgql_user=$($EnvVars['pgql_user'])"
        } else {
            $content += "pgql_user=llama"
        }
        if ($EnvVars.ContainsKey('pgql_psw')) {
            $content += "pgql_psw=$($EnvVars['pgql_psw'])"
        } else {
            Write-Warning "pgql_psw not set, using default"
            $content += "pgql_psw="
        }
        if ($EnvVars.ContainsKey('pgql_db')) {
            $content += "pgql_db=$($EnvVars['pgql_db'])"
        } else {
            $content += "pgql_db=notebookllama"
        }
        
        $content += ""
        $content += "# Observability Configuration"
        if ($EnvVars.ContainsKey('OTLP_ENDPOINT')) {
            $content += "OTLP_ENDPOINT=$($EnvVars['OTLP_ENDPOINT'])"
        } else {
            $content += "OTLP_ENDPOINT=http://localhost:4318/v1/traces"
        }
        if ($EnvVars.ContainsKey('ENABLE_OBSERVABILITY')) {
            $content += "ENABLE_OBSERVABILITY=$($EnvVars['ENABLE_OBSERVABILITY'])"
        } else {
            $content += "ENABLE_OBSERVABILITY=true"
        }
        
        $content += ""
        $content += "# Optional Variables"
        if ($EnvVars.ContainsKey('PHOENIX_API_KEY')) {
            $content += "PHOENIX_API_KEY=$($EnvVars['PHOENIX_API_KEY'])"
        }
        if ($EnvVars.ContainsKey('PHOENIX_ENDPOINT')) {
            $content += "PHOENIX_ENDPOINT=$($EnvVars['PHOENIX_ENDPOINT'])"
        }
        
        # Write to file
        $content | Out-File -FilePath $FilePath -Encoding UTF8 -ErrorAction Stop
        return $true
    }
    catch {
        Write-Error "Failed to write .env file: $_"
        return $false
    }
}

# Function to check current environment status
function Test-EnvironmentStatus {
    param([hashtable]$EnvVars)
    
    Write-Host "üîç Environment Status Check" -ForegroundColor Cyan
    Write-Host "==========================" -ForegroundColor Cyan
    Write-Host ""
    
    $status = @{
        OpenAIOK = $false
        ElevenLabsOK = $false
        DatabaseOK = $true
        ObservabilityOK = $true
    }
    
    # Check OpenAI
    if ($EnvVars.ContainsKey('OPENAI_API_KEY') -and -not [string]::IsNullOrWhiteSpace($EnvVars['OPENAI_API_KEY'])) {
        Write-Success "‚úÖ OPENAI_API_KEY is configured"
        $status.OpenAIOK = $true
    } else {
        Write-Warning "‚ùå OPENAI_API_KEY not configured"
    }
    
    # Check ElevenLabs
    if ($EnvVars.ContainsKey('ELEVENLABS_API_KEY') -and -not [string]::IsNullOrWhiteSpace($EnvVars['ELEVENLABS_API_KEY'])) {
        Write-Success "‚úÖ ELEVENLABS_API_KEY is configured"
        $status.ElevenLabsOK = $true
    } else {
        Write-Warning "‚ùå ELEVENLABS_API_KEY not configured"
    }
    
    # Check database configuration
    $dbVars = @('pgql_user', 'pgql_psw', 'pgql_db')
    foreach ($var in $dbVars) {
        if ($EnvVars.ContainsKey($var)) {
            Write-Success "‚úÖ $var is configured"
        } else {
            Write-Warning "‚ö†Ô∏è  $var not configured (will use default)"
        }
    }
    
    # Check observability configuration
    if ($EnvVars.ContainsKey('OTLP_ENDPOINT')) {
        Write-Success "‚úÖ OTLP_ENDPOINT is configured"
    } else {
        Write-Warning "‚ö†Ô∏è  OTLP_ENDPOINT not configured (will use default)"
    }
    
    if ($EnvVars.ContainsKey('ENABLE_OBSERVABILITY')) {
        Write-Success "‚úÖ ENABLE_OBSERVABILITY is configured"
    } else {
        Write-Warning "‚ö†Ô∏è  ENABLE_OBSERVABILITY not configured (will use default)"
    }
    
    Write-Host ""
    Write-Host "üéôÔ∏è  Podcast Generation Status" -ForegroundColor Cyan
    Write-Host "-----------------------------" -ForegroundColor Cyan
    
    if ($status.OpenAIOK -and $status.ElevenLabsOK) {
        Write-Success "‚úÖ Podcast generation is ready!"
        Write-Host "   You can now use the 'Generate In-Depth Conversation' feature."
    } else {
        Write-Warning "‚ùå Podcast generation is not available"
        if (-not $status.OpenAIOK) {
            Write-Host "   Missing OPENAI_API_KEY"
        }
        if (-not $status.ElevenLabsOK) {
            Write-Host "   Missing ELEVENLABS_API_KEY"
        }
        Write-Host "   Please configure the missing API keys to enable podcast generation."
    }
    
    return $status
}

# Main script logic
function Main {
    # Show help if requested
    if ($Help) {
        Show-Help
        return
    }
    
    Write-Host "üîß BioReasoning Environment Setup" -ForegroundColor Cyan
    Write-Host "==================================" -ForegroundColor Cyan
    Write-Host ""
    
    $envFilePath = ".env"
    $envVars = @{}
    
    # Load existing environment variables
    if (Test-Path $envFilePath) {
        if ($Force) {
            Write-Warning "Forcing recreation of .env file"
        } else {
            Write-Success "üìÑ Found existing .env file"
            $envVars = Load-EnvFile -FilePath $envFilePath
        }
    } else {
        Write-Status "üìÑ Creating new .env file..."
    }
    
    # Check current status
    $status = Test-EnvironmentStatus -EnvVars $envVars
    
    # If check-only mode, exit here
    if ($CheckOnly) {
        Write-Host ""
        Write-Host "üìù Next Steps:" -ForegroundColor Cyan
        if ($status.OpenAIOK -and $status.ElevenLabsOK) {
            Write-Host "1. Start the application: .\scripts\run-docs-client.ps1"
            Write-Host "2. Upload a document in the Documents page"
            Write-Host "3. Use the 'Generate In-Depth Conversation' button"
        } else {
            Write-Host "1. Run this script again without -CheckOnly to configure missing API keys"
            Write-Host "2. Get your API keys from:"
            Write-Host "   - OpenAI: https://platform.openai.com/api-keys"
            Write-Host "   - ElevenLabs: https://elevenlabs.io/speech-synthesis"
        }
        return
    }
    
    # Interactive setup
    Write-Host ""
    Write-Host "üîë API Key Configuration" -ForegroundColor Cyan
    Write-Host "------------------------" -ForegroundColor Cyan
    
    # Configure OpenAI API Key
    if (-not $status.OpenAIOK) {
        $openaiKey = Read-SecureInput -Prompt "‚ùå OPENAI_API_KEY not set" -Provider "OpenAI"
        if ($openaiKey) {
            $envVars['OPENAI_API_KEY'] = $openaiKey
            Write-Success "   ‚úÖ OpenAI API key saved"
        } else {
            Write-Warning "   ‚ö†Ô∏è  Skipped OpenAI API key setup"
        }
    }
    
    # Configure ElevenLabs API Key
    if (-not $status.ElevenLabsOK) {
        $elevenlabsKey = Read-SecureInput -Prompt "‚ùå ELEVENLABS_API_KEY not set" -Provider "ElevenLabs"
        if ($elevenlabsKey) {
            $envVars['ELEVENLABS_API_KEY'] = $elevenlabsKey
            Write-Success "   ‚úÖ ElevenLabs API key saved"
        } else {
            Write-Warning "   ‚ö†Ô∏è  Skipped ElevenLabs API key setup"
        }
    }
    
    # Save the environment file
    if ($envVars.Count -gt 0) {
        Write-Host ""
        Write-Status "üíæ Saving environment configuration..."
        if (Save-EnvFile -EnvVars $envVars -FilePath $envFilePath) {
            Write-Success "‚úÖ Environment configuration saved to .env file"
        } else {
            Write-Error "‚ùå Failed to save environment configuration"
            return
        }
    }
    
    # Final status check
    Write-Host ""
    $finalStatus = Test-EnvironmentStatus -EnvVars $envVars
    
    Write-Host ""
    Write-Host "üìù Next Steps:" -ForegroundColor Cyan
    if ($finalStatus.OpenAIOK -and $finalStatus.ElevenLabsOK) {
        Write-Host "1. Start the infrastructure: .\scripts\start-infrastructure.ps1"
        Write-Host "2. Start the MCP server: .\scripts\run-docs-server.ps1"
        Write-Host "3. Start the Streamlit client: .\scripts\run-docs-client.ps1"
        Write-Host "4. Upload a document in the Documents page"
        Write-Host "5. Use the 'Generate In-Depth Conversation' button"
    } else {
        Write-Host "1. Run this script again to configure missing API keys"
        Write-Host "2. Get your API keys from:"
        Write-Host "   - OpenAI: https://platform.openai.com/api-keys"
        Write-Host "   - ElevenLabs: https://elevenlabs.io/speech-synthesis"
    }
    
    Write-Host ""
    Write-Host "üîó For help, visit: https://github.com/your-repo/bioreasoning" -ForegroundColor Gray
}

# Handle command line arguments
if ($Help) {
    Show-Help
} else {
    Main
} 